package com.nec.cmake

import com.eed3si9n.expecty.Expecty.expect
import com.nec.aurora.Aurora
import com.nec.native.NativeEvaluator.ExecutorPluginManagedEvaluator
import com.nec.spark.planning.VERewriteStrategy
import com.nec.spark.{Aurora4SparkExecutorPlugin, AuroraSqlPlugin, SparkAdditions}
import com.typesafe.scalalogging.LazyLogging

import org.apache.spark.sql.internal.SQLConf.CODEGEN_FALLBACK
import org.apache.spark.sql.{Dataset, SparkSession}
import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.matchers.should.Matchers
import org.scalatest.{BeforeAndAfter, BeforeAndAfterAll, Ignore}
import java.io.File

// TPC-H table schemas
object TPCHSqlSpecSpark {

  def VeConfiguration: SparkSession.Builder => SparkSession.Builder = {
    _.config(CODEGEN_FALLBACK.key, value = false)
      .config("spark.sql.codegen.comments", value = true)
      .config("spark.plugins", classOf[AuroraSqlPlugin].getCanonicalName)
//      .withExtensions(sse =>
//        sse.injectPlannerStrategy(_ =>
//          new VERewriteStrategy(ExecutorPluginManagedEvaluator)
//        )
//      )
  }

}


class TPCHSqlCSpecSpark
  extends AnyFreeSpec
  with BeforeAndAfter
  with BeforeAndAfterAll
  with SparkAdditions
  with Matchers
  with LazyLogging {

  private var initialized = false

  def configuration: SparkSession.Builder => SparkSession.Builder =
    DynamicCSqlExpressionEvaluationSpec.DefaultConfiguration

  def createViews(sparkSession: SparkSession): Unit = {
    import sparkSession.implicits._

    val sc = sparkSession.sparkContext
    val inputDir = "src/test/resources/dbgen"

    val dfMap = Map(
      "customer" -> sc.textFile(inputDir + "/customer.tbl*").map(_.split('|')).map(p =>
        Customer(p(0).trim.toLong, p(1).trim, p(2).trim, p(3).trim.toLong, p(4).trim, p(5).trim.toDouble, p(6).trim, p(7).trim)).toDF(),

      "lineitem" -> sc.textFile(inputDir + "/lineitem.tbl*").map(_.split('|')).map(p =>
        Lineitem(p(0).trim.toLong, p(1).trim.toLong, p(2).trim.toLong, p(3).trim.toLong, p(4).trim.toDouble, p(5).trim.toDouble, p(6).trim.toDouble, p(7).trim.toDouble, p(8).trim, p(9).trim, p(10).trim, p(11).trim, p(12).trim, p(13).trim, p(14).trim, p(15).trim)).toDF(),

      "nation" -> sc.textFile(inputDir + "/nation.tbl*").map(_.split('|')).map(p =>
        Nation(p(0).trim.toLong, p(1).trim, p(2).trim.toLong, p(3).trim)).toDF(),

      "region" -> sc.textFile(inputDir + "/region.tbl*").map(_.split('|')).map(p =>
        Region(p(0).trim.toLong, p(1).trim, p(2).trim)).toDF(),

      "orders" -> sc.textFile(inputDir + "/orders.tbl*").map(_.split('|')).map(p =>
        Order(p(0).trim.toLong, p(1).trim.toLong, p(2).trim, p(3).trim.toDouble, p(4).trim, p(5).trim, p(6).trim, p(7).trim.toLong, p(8).trim)).toDF(),

      "part" -> sc.textFile(inputDir + "/part.tbl*").map(_.split('|')).map(p =>
        Part(p(0).trim.toLong, p(1).trim, p(2).trim, p(3).trim, p(4).trim, p(5).trim.toLong, p(6).trim, p(7).trim.toDouble, p(8).trim)).toDF(),

      "partsupp" -> sc.textFile(inputDir + "/partsupp.tbl*").map(_.split('|')).map(p =>
        Partsupp(p(0).trim.toLong, p(1).trim.toLong, p(2).trim.toLong, p(3).trim.toDouble, p(4).trim)).toDF(),

      "supplier" -> sc.textFile(inputDir + "/supplier.tbl*").map(_.split('|')).map(p =>
        Supplier(p(0).trim.toLong, p(1).trim, p(2).trim, p(3).trim.toLong, p(4).trim, p(5).trim.toDouble, p(6).trim)).toDF()
    )

    dfMap.foreach {
      case (key, value) => value.createOrReplaceTempView(key)
    }
  }


  implicit class RichDataSet[T](val dataSet: Dataset[T]) {
    def ensureCEvaluating(): Dataset[T] = {
      val thePlan = dataSet.queryExecution.executedPlan
      expect(thePlan.toString().contains("CEvaluation"))
      dataSet
    }

    def ensureNewCEvaluating(): Dataset[T] = {
      val thePlan = dataSet.queryExecution.executedPlan
      expect(thePlan.toString().contains("NewCEvaluationPlan"))
      dataSet
    }

    def ensureJoinPlanEvaluated(): Dataset[T] = {
      val thePlan = dataSet.queryExecution.executedPlan
      expect(thePlan.toString().contains("GeneratedJoinPlan"))
      dataSet
    }

    def debugSqlHere[V](f: Dataset[T] => V): V = {
      try f(dataSet)
      catch {
        case e: Throwable =>
          logger.info(s"${dataSet.queryExecution.executedPlan}; ${e}", e)
          throw e
      }
    }
  }

  def withTpchViews[T](configure: SparkSession.Builder => SparkSession.Builder)(f: SparkSession => T): T = {
    withSparkSession2(configure) { sparkSession =>
      createViews(sparkSession)
      f(sparkSession)
    }
  }

  "Query 1" in withTpchViews(configuration) { sparkSession =>
    val delta = 90
    val sql = s"""
      select
        l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice*(1-l_discount)) as sum_disc_price,
        sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
      from
        lineitem
      where
        l_shipdate <= date '1998-12-01' - interval '$delta' day
      group by l_returnflag, l_linestatus
      order by l_returnflag, l_linestatus
    """

    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect() == null)
    }
  }
  "Query 2" in withTpchViews(configuration) { sparkSession =>
    val size = 15
    val pType = "BRASS"
    val region = "EUROPE"

    val sql = s"""
      select
        s_acctbal,
        s_name,
        n_name,
        p_partkey,
        p_mfgr,
        s_address,
        s_phone,
        s_comment
      from
        part,
        supplier,
        partsupp,
        nation,
        region
      where
        p_partkey = ps_partkey
        and s_suppkey = ps_suppkey
        and p_size = $size
        and p_type like '%$pType'
        and s_nationkey = n_nationkey
        and n_regionkey = r_regionkey
        and r_name = '$region'
        and ps_supplycost = (
          select
            min(ps_supplycost)
          from
            partsupp,
            supplier,
            nation,
            region
          where
            p_partkey = ps_partkey
            and s_suppkey = ps_suppkey
            and s_nationkey = n_nationkey
            and n_regionkey = r_regionkey
            and r_name = '$region'
        )
        order by
          s_acctbal desc,
          n_name,
          s_name,
          p_partkey
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.count() == 0)
    }
  }
  "Query 3" in withTpchViews(configuration) { sparkSession =>
    val segment = "BUILDING"
    val date = "1995-03-15"

    val sql = s"""
      select
        l_orderkey,
        sum(l_extendedprice * (1 - l_discount)) as revenue,
        o_orderdate,
        o_shippriority
      from
        customer,
        orders,
        lineitem
      where
        c_mktsegment = '$segment'
        and c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and o_orderdate < date '$date'
        and l_shipdate > date '$date'
      group by
        l_orderkey,
        o_orderdate,
        o_shippriority
      order by
        revenue desc,
        o_orderdate
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null)
    }
  }
  "Query 4" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val date = "1993-07-01"

    val sql = s"""
      select
        o_orderpriority,
        count(*) as order_count
      from
        orders
      where
        o_orderdate >= date '$date'
        and o_orderdate < date '$date' + interval '3' month
        and exists (
          select *
          from
            lineitem
          where
            l_orderkey = o_orderkey
            and l_commitdate < l_receiptdate
        )
      group by
        o_orderpriority
      order by
        o_orderpriority;
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(String, Long)].collect().toList == List(("1-URGENT",10594), ("2-HIGH",10476), ("3-MEDIUM",10410), ("4-NOT SPECIFIED",10556), ("5-LOW",10487)))
    }
  }
  "Query 5" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val region = "ASIA"
    val date = "1994-01-01"

    val sql = s"""
      select
        n_name,
        sum(l_extendedprice * (1 - l_discount)) as revenue
      from
        customer,
        orders,
        lineitem,
        supplier,
        nation,
        region
      where
        c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and l_suppkey = s_suppkey
        and c_nationkey = s_nationkey
        and s_nationkey = n_nationkey
        and n_regionkey = r_regionkey
        and r_name = '$region'
        and o_orderdate >= date '$date'
        and o_orderdate < date '$date' + interval '1' year
      group by
        n_name
      order by
        revenue desc
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(String, Double)].collect().toList == List(("INDONESIA",5.5502041169699915E7), ("VIETNAM",5.529508699669991E7), ("CHINA",5.372449425660001E7), ("INDIA",5.2035512000199996E7), ("JAPAN",4.5410175695400015E7)))
    }
  }
  "Query 6" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._
    val date = "1994-01-01"
    val discount = 0.06
    val quantity = 24

    val sql = s"""
      select
        sum(l_extendedprice*l_discount) as revenue
      from
        lineitem
      where
        l_shipdate >= date '$date'
        and l_shipdate < date '$date' + interval '1' year
        and l_discount between $discount - 0.01
        and $discount + 0.01
        and l_quantity < $quantity
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[scala.Double].collect.toList == List(1.2314107822829895E8)) // 123141078.23
    }
  }
  "Query 7" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val nation1 = "FRANCE"
    val nation2 = "GERMANY"

    val sql = s"""
      select
        supp_nation,
        cust_nation,
        l_year,
        sum(volume) as revenue
      from (
        select
          n1.n_name as supp_nation,
          n2.n_name as cust_nation,
          extract(year from l_shipdate) as l_year,
          l_extendedprice * (1 - l_discount) as volume
        from
          supplier,
          lineitem,
          orders,
          customer,
          nation n1,
          nation n2
        where
          s_suppkey = l_suppkey
          and o_orderkey = l_orderkey
          and c_custkey = o_custkey
          and s_nationkey = n1.n_nationkey
          and c_nationkey = n2.n_nationkey
          and (
            (n1.n_name = '$nation1' and n2.n_name = '$nation2')
            or (n1.n_name = '$nation2' and n2.n_name = '$nation1')
          )
          and l_shipdate between date '1995-01-01' and date '1996-12-31' ) as shipping
      group by
        supp_nation,
        cust_nation,
        l_year
      order by
        supp_nation,
        cust_nation,
        l_year
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(String, String,Int ,Double)].collect().toList == List(("FRANCE","GERMANY",1995,5.463973273360003E7), ("FRANCE","GERMANY",1996,5.463308330760005E7), ("GERMANY","FRANCE",1995,5.253174666970001E7), ("GERMANY","FRANCE",1996,5.2520549022399865E7))) // FRANCE GERMANY 1995 54639732.73
    }
  }
  //Fails
  "Query 8" in withTpchViews(configuration) { sparkSession =>
    val nation = "BRAZIL"
    val region = "AMERICA"
    val pType = "ECONOMY ANODIZED STEEL"

    val sql = s"""
      select
        o_year,
        sum(
          case when nation = '$nation'
            then volume
            else 0
          end
        ) / sum(volume) as mkt_share
      from (
        select
          extract(year from o_orderdate) as o_year,
          l_extendedprice * (1-l_discount) as volume,
          n2.n_name as nation
        from
          part,
          supplier,
          lineitem,
          orders,
          customer,
          nation n1,
          nation n2,
          region
        where
          p_partkey = l_partkey
          and s_suppkey = l_suppkey
          and l_orderkey = o_orderkey
          and o_custkey = c_custkey
          and c_nationkey = n1.n_nationkey
          and n1.n_regionkey = r_regionkey
          and r_name = '$region'
          and s_nationkey = n2.n_nationkey
          and o_orderdate between date '1995-01-01'
          and date '1996-12-31'
          and p_type = '$pType'
       ) as all_nations
     group by
      o_year
    order by
      o_year
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // 1995 0.03
    }
  }
  "Query 9" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val color = "green"

    val sql = s"""
      select
        nation,
        o_year,
        sum(amount) as sum_profit
      from (
        select
          n_name as nation,
          extract(year from o_orderdate) as o_year,
          l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
        from
          part,
          supplier,
          lineitem,
          partsupp,
          orders,
          nation
        where
          s_suppkey = l_suppkey
          and ps_suppkey = l_suppkey
          and ps_partkey = l_partkey
          and p_partkey = l_partkey
          and o_orderkey = l_orderkey
          and s_nationkey = n_nationkey
          and p_name like '%$color%'
      ) as profit
      group by
        nation,
        o_year
      order by
        nation,
        o_year desc
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(String, Int, Double)].collect().toList == List(("ALGERIA",1998,2.7136900180300023E7), ("ALGERIA",1997,4.861183349620001E7), ("ALGERIA",1996,4.828548267819998E7), ("ALGERIA",1995,4.4402273599900074E7), ("ALGERIA",1994,4.8694008066800006E7), ("ALGERIA",1993,4.604420778380006E7), ("ALGERIA",1992,4.563684948809998E7), ("ARGENTINA",1998,2.8341663784800023E7), ("ARGENTINA",1997,4.714396411760001E7), ("ARGENTINA",1996,4.525527860210022E7), ("ARGENTINA",1995,4.563176920539999E7), ("ARGENTINA",1994,4.826885635470003E7), ("ARGENTINA",1993,4.860559361619987E7), ("ARGENTINA",1992,4.665424074869995E7), ("BRAZIL",1998,2.6527736396000035E7), ("BRAZIL",1997,4.5640660767699964E7), ("BRAZIL",1996,4.509064716300001E7), ("BRAZIL",1995,4.401588851320002E7), ("BRAZIL",1994,4.4854218893200025E7), ("BRAZIL",1993,4.5766603737900026E7), ("BRAZIL",1992,4.5280216802699946E7), ("CANADA",1998,2.682898539439998E7), ("CANADA",1997,4.48499543185999E7), ("CANADA",1996,4.630793611079996E7), ("CANADA",1995,4.73119930440999E7), ("CANADA",1994,4.6691491959599994E7), ("CANADA",1993,4.663479111210005E7), ("CANADA",1992,4.587384968820007E7), ("CHINA",1998,2.7510180165700033E7), ("CHINA",1997,4.612386540969993E7), ("CHINA",1996,4.953280706009982E7), ("CHINA",1995,4.6734651483800046E7), ("CHINA",1994,4.63978966097001E7), ("CHINA",1993,4.9634673946300015E7), ("CHINA",1992,4.694945764260001E7), ("EGYPT",1998,2.840149179680002E7), ("EGYPT",1997,4.767485767829997E7), ("EGYPT",1996,4.7745727545000024E7), ("EGYPT",1995,4.5897160678300016E7), ("EGYPT",1994,4.719489522800001E7), ("EGYPT",1993,4.913362764709997E7), ("EGYPT",1992,4.700057450270004E7), ("ETHIOPIA",1998,2.5135046137700006E7), ("ETHIOPIA",1997,4.30105960837999E7), ("ETHIOPIA",1996,4.3636287192199916E7), ("ETHIOPIA",1995,4.357575733430005E7), ("ETHIOPIA",1994,4.159720852830002E7), ("ETHIOPIA",1993,4.2622804161599964E7), ("ETHIOPIA",1992,4.4385735681300014E7), ("FRANCE",1998,2.621039228040002E7), ("FRANCE",1997,4.239296947309996E7), ("FRANCE",1996,4.330631797489997E7), ("FRANCE",1995,4.6377408432800025E7), ("FRANCE",1994,4.344735299219995E7), ("FRANCE",1993,4.372996106389999E7), ("FRANCE",1992,4.405230842900004E7), ("GERMANY",1998,2.59912571071E7), ("GERMANY",1997,4.396835580789996E7), ("GERMANY",1996,4.58820748049001E7), ("GERMANY",1995,4.331433830770001E7), ("GERMANY",1994,4.461699543690001E7), ("GERMANY",1993,4.5126645911300085E7), ("GERMANY",1992,4.4361141210699946E7), ("INDIA",1998,2.9626417237899937E7), ("INDIA",1997,5.138611134479999E7), ("INDIA",1996,4.757101851220003E7), ("INDIA",1995,4.934406228289991E7), ("INDIA",1994,5.0106952426099986E7), ("INDIA",1993,4.811276669870009E7), ("INDIA",1992,4.79143031234001E7), ("INDONESIA",1998,2.7734909676300004E7), ("INDONESIA",1997,4.459381298630002E7), ("INDONESIA",1996,4.4746729807800055E7), ("INDONESIA",1995,4.5593622699299954E7), ("INDONESIA",1994,4.598848387719998E7), ("INDONESIA",1993,4.614796378950002E7), ("INDONESIA",1992,4.518577706879999E7), ("IRAN",1998,2.666160893009999E7), ("IRAN",1997,4.501911416960002E7), ("IRAN",1996,4.589139709919995E7), ("IRAN",1995,4.4414285234800026E7), ("IRAN",1994,4.369636047949986E7), ("IRAN",1993,4.5362775809399985E7), ("IRAN",1992,4.305233841430007E7), ("IRAQ",1998,3.118849819139999E7), ("IRAQ",1997,4.858530752220001E7), ("IRAQ",1996,5.003659384040003E7), ("IRAQ",1995,4.877480172750005E7), ("IRAQ",1994,4.879584723099995E7), ("IRAQ",1993,4.7435691508200176E7), ("IRAQ",1992,4.75623556571E7), ("JAPAN",1998,2.4694102171999976E7), ("JAPAN",1997,4.237705234540001E7), ("JAPAN",1996,4.026777890939997E7), ("JAPAN",1995,4.092531746500005E7), ("JAPAN",1994,4.115951830579995E7), ("JAPAN",1993,3.9589074277100004E7), ("JAPAN",1992,3.9113493905200005E7), ("JORDAN",1998,2.3489867789299995E7), ("JORDAN",1997,4.161596266189996E7), ("JORDAN",1996,4.1860855468399994E7), ("JORDAN",1995,3.993167209079997E7), ("JORDAN",1994,4.070755546380006E7), ("JORDAN",1993,3.906040546580007E7), ("JORDAN",1992,4.165760426840004E7), ("KENYA",1998,2.55663374303E7), ("KENYA",1997,4.310884790239992E7), ("KENYA",1996,4.348295354299993E7), ("KENYA",1995,4.2517988981400035E7), ("KENYA",1994,4.361247945229994E7), ("KENYA",1993,4.27240387571E7), ("KENYA",1992,4.321710620680003E7), ("MOROCCO",1998,2.491549687559999E7), ("MOROCCO",1997,4.2698382855E7), ("MOROCCO",1996,4.298611350490002E7), ("MOROCCO",1995,4.231608915929994E7), ("MOROCCO",1994,4.345860460290004E7), ("MOROCCO",1993,4.267228806990004E7), ("MOROCCO",1992,4.280078164149996E7), ("MOZAMBIQUE",1998,2.8279876030099984E7), ("MOZAMBIQUE",1997,5.11592162297999E7), ("MOZAMBIQUE",1996,4.807252506450003E7), ("MOZAMBIQUE",1995,4.890520060070016E7), ("MOZAMBIQUE",1994,4.6092076280500114E7), ("MOZAMBIQUE",1993,4.8555926266900055E7), ("MOZAMBIQUE",1992,4.7809075119199894E7), ("PERU",1998,2.6713966267799992E7), ("PERU",1997,4.832400860110004E7), ("PERU",1996,5.0310008862900004E7), ("PERU",1995,4.964708096290004E7), ("PERU",1994,4.642091027730012E7), ("PERU",1993,5.153690624869993E7), ("PERU",1992,4.771166531369992E7), ("ROMANIA",1998,2.7271993100999985E7), ("ROMANIA",1997,4.506305919529999E7), ("ROMANIA",1996,4.749233503229999E7), ("ROMANIA",1995,4.571063629089997E7), ("ROMANIA",1994,4.608804110660006E7), ("ROMANIA",1993,4.7515092561300024E7), ("ROMANIA",1992,4.411143980439998E7), ("RUSSIA",1998,2.7935323727100007E7), ("RUSSIA",1997,4.8222347292400025E7), ("RUSSIA",1996,4.755355949320002E7), ("RUSSIA",1995,4.675599009759996E7), ("RUSSIA",1994,4.800051561909987E7), ("RUSSIA",1993,4.85696245082E7), ("RUSSIA",1992,4.767283153290001E7), ("SAUDI ARABIA",1998,2.7113516842399977E7), ("SAUDI ARABIA",1997,4.6690468964899994E7), ("SAUDI ARABIA",1996,4.777578266699997E7), ("SAUDI ARABIA",1995,4.665710782869994E7), ("SAUDI ARABIA",1994,4.818167280999998E7), ("SAUDI ARABIA",1993,4.5692556443800054E7), ("SAUDI ARABIA",1992,4.8924913271699935E7), ("UNITED KINGDOM",1998,2.6366682878600024E7), ("UNITED KINGDOM",1997,4.451813018510001E7), ("UNITED KINGDOM",1996,4.553972961660007E7), ("UNITED KINGDOM",1995,4.6845879338999994E7), ("UNITED KINGDOM",1994,4.308160957369995E7), ("UNITED KINGDOM",1993,4.477014675549995E7), ("UNITED KINGDOM",1992,4.412340254839989E7), ("UNITED STATES",1998,2.7826593682499997E7), ("UNITED STATES",1997,4.663857236480008E7), ("UNITED STATES",1996,4.668828054740003E7), ("UNITED STATES",1995,4.8951591615600005E7), ("UNITED STATES",1994,4.5099092059799984E7), ("UNITED STATES",1993,4.618160052779994E7), ("UNITED STATES",1992,4.616821409009998E7), ("VIETNAM",1998,2.728193100110001E7), ("VIETNAM",1997,4.873591417959999E7), ("VIETNAM",1996,4.782459590400002E7), ("VIETNAM",1995,4.8235135801599994E7), ("VIETNAM",1994,4.7729256332399964E7), ("VIETNAM",1993,4.535267686720006E7), ("VIETNAM",1992,4.7846355648499906E7)))  // ALGERIA 1998 31342867.24
    }
  }
  "Query 10" in withTpchViews(configuration) { sparkSession =>
    val date = "1993-10-01"

    val sql = s"""
      select
        c_custkey,
        c_name,
        sum(l_extendedprice * (1 - l_discount)) as revenue,
        c_acctbal,
        n_name,
        c_address,
        c_phone,
        c_comment
      from
        customer,
        orders,
        lineitem,
        nation
      where
        c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and o_orderdate >= date '$date'
        and o_orderdate < date '$date' + interval '3' month and l_returnflag = 'R'
        and c_nationkey = n_nationkey
      group by
        c_custkey,
        c_name,
        c_acctbal,
        c_phone,
        n_name,
        c_address,
        c_comment
      order by
        revenue desc
    """
    sparkSession.sql(sql).debugSqlHere { ds =>

      assert(ds.collect.toList == null)
    }
  }
  "Query 11" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val nation = "GERMANY"
    val fraction = 0.0001

    val sql = s"""
      select
        ps_partkey,
        sum(ps_supplycost * ps_availqty) as value
      from
        partsupp,
        supplier,
        nation
      where
        ps_suppkey = s_suppkey
        and s_nationkey = n_nationkey
        and n_name = '$nation'
      group by
        ps_partkey having sum(ps_supplycost * ps_availqty) > (
          select
            sum(ps_supplycost * ps_availqty) * $fraction
          from
            partsupp,
            supplier,
            nation
          where
            ps_suppkey = s_suppkey
            and s_nationkey = n_nationkey
            and n_name = '$nation'
        )
      order by
        value desc
    """
    sparkSession.sql(sql).debugSqlHere { ds =>

      assert(ds.as[(BigInt, Double)].collect.toList == List((129760,1.753845686E7), (166726,1.650335392E7), (191287,1.6474801969999999E7), (161758,1.610175554E7), (34452,1.598384472E7), (139035,1.590707834E7), (9403,1.5451755620000001E7), (154358,1.5212937879999999E7), (38823,1.506480286E7), (85606,1.5053957150000002E7), (33354,1.44082974E7), (154747,1.440758068E7), (82865,1.4235489780000001E7), (76094,1.409424704E7), (222,1.393777774E7), (121271,1.3908336E7), (55221,1.371612047E7), (22819,1.3666434280000001E7), (76281,1.364685368E7), (85298,1.358115493E7), (85158,1.3554904E7), (139684,1.3535538719999999E7), (31034,1.349802525E7), (87305,1.348284704E7), (10181,1.344514875E7), (62323,1.34118243E7), (26489,1.337725638E7), (96493,1.333905783E7), (56548,1.3329014969999999E7), (55576,1.3306843350000001E7), (159751,1.330661448E7), (92406,1.32874145E7), (182636,1.3223726739999998E7), (199969,1.313528821E7), (62865,1.3001926940000001E7), (7284,1.2945298190000001E7), (197867,1.294451052E7), (11562,1.293157551E7), (75165,1.2916918120000001E7), (97175,1.29112835E7), (140840,1.289656223E7), (65241,1.289060046E7), (166120,1.287692722E7), (9035,1.28638287E7), (144616,1.2853549299999999E7), (176723,1.283230974E7), (170884,1.2792136579999998E7), (29790,1.272330033E7), (95213,1.255548373E7), (183873,1.255053305E7), (171235,1.24765383E7), (21533,1.243782132E7), (17290,1.24321595E7), (156397,1.22606235E7), (122611,1.222281298E7), (139155,1.222031925E7), (146316,1.221580061E7), (171381,1.219973452E7), (198633,1.207822695E7), (167417,1.2046637620000001E7), (59512,1.204346876E7), (31688,1.203489364E7), (159586,1.2001505840000002E7), (8993,1.19638143E7), (120302,1.1857707549999999E7), (43536,1.177934052E7), (9552,1.177690916E7), (86223,1.177220508E7), (53776,1.175866965E7), (131285,1.161695374E7), (91628,1.161111483E7), (169644,1.1567959719999999E7), (182299,1.156746205E7), (33107,1.145381876E7), (104184,1.1436657440000001E7), (67027,1.141912714E7), (176869,1.1371451709999999E7), (30885,1.136967479E7), (54420,1.1345076879999999E7), (72240,1.1313951049999999E7), (178708,1.1294635169999998E7), (81298,1.127368613E7), (158324,1.124344272E7), (117095,1.124253524E7), (176793,1.1237733379999999E7), (86091,1.117779379E7), (116033,1.114543436E7), (129058,1.11191122E7), (193714,1.110470639E7), (117195,1.107721796E7), (49851,1.1043701780000001E7), (19791,1.103066262E7), (75800,1.1012401620000001E7), (161562,1.0996371690000001E7), (10119,1.098001575E7), (39185,1.0970042559999999E7), (47223,1.0950022129999999E7), (175594,1.094292305E7), (111295,1.089367561E7), (155446,1.085276457E7), (156391,1.0839810379999999E7), (40884,1.0837234190000001E7), (141288,1.083713021E7), (152388,1.083097782E7), (33449,1.083085872E7), (149035,1.082613002E7), (162620,1.081427568E7), (118324,1.07917881E7), (38932,1.077754175E7), (121294,1.0764225219999999E7), (48721,1.076258249E7), (63342,1.07401326E7), (5614,1.0724668799999999E7), (62266,1.07111431E7), (100202,1.069667555E7), (197741,1.0688560719999999E7), (169178,1.06485228E7), (5271,1.063939265E7), (34499,1.0584177100000001E7), (71108,1.056911756E7), (137132,1.0539880469999999E7), (78451,1.052487324E7), (150827,1.050381048E7), (107237,1.048803084E7), (101727,1.0473558100000001E7), (58708,1.046628044E7), (89768,1.0465477219999999E7), (146493,1.044429158E7), (55424,1.044400648E7), (16560,1.042557474E7), (133114,1.04150979E7), (195810,1.04136252E7), (76673,1.039197718E7), (97305,1.039089057E7), (134210,1.038721002E7), (188536,1.038652992E7), (122255,1.033576032E7), (2682,1.03129661E7), (43814,1.030308661E7), (34767,1.029040518E7), (165584,1.027370589E7), (2231,1.027041555E7), (111259,1.026325656E7), (195578,1.023979582E7), (21093,1.02175313E7), (29856,1.0216932540000001E7), (133686,1.021334576E7), (87745,1.01855094E7), (135153,1.01793797E7), (11773,1.016741084E7), (76316,1.01651517E7), (123076,1.016122578E7), (91894,1.013046219E7), (39741,1.012838752E7), (111753,1.0119780979999999E7), (142729,1.010474889E7), (116775,1.0097750419999998E7), (102589,1.003478436E7), (186268,1.001218157E7), (44545,1.000028648E7), (23307,9966577.5), (124281,9930018.9), (69604,9925730.64), (21971,9908982.030000001), (58148,9895894.4), (16532,9886529.9), (159180,9883744.43), (74733,9877582.879999999), (35173,9858275.92), (7116,9856881.020000001), (124620,9838589.14), (122108,9829949.350000001), (67200,9828690.69), (164775,9821424.44), (9039,9816447.72), (14912,9803102.2), (190906,9791315.7), (130398,9781674.27), (119310,9776927.209999999), (10132,9770930.780000001), (107211,9757586.25), (113958,9757065.5), (37009,9748362.69), (66746,9743528.76), (134486,9731922.0), (15945,9731096.45), (55307,9717745.8), (56362,9714922.83), (57726,9711792.100000001), (57256,9708621.0), (112292,9701653.08), (87514,9699492.53), (174206,9680562.02), (72865,9679043.34), (114357,9671017.44), (112807,9665019.21), (115203,9661018.73), (177454,9658906.35), (161275,9634313.71), (61893,9617095.440000001), (122219,9604888.200000001), (183427,9601362.58), (59158,9599705.96), (61931,9584918.98), (5532,9579964.14), (20158,9576714.38), (167199,9557413.08), (38869,9550279.53), (86949,9541943.700000001), (198544,9538613.92), (193762,9538238.94), (108807,9536247.16), (168324,9535647.99), (115588,9532195.04), (141372,9529702.14), (175120,9526068.66), (163851,9522808.83), (160954,9520359.45), (117757,9517882.8), (52594,9508325.76), (60960,9498843.06), (70272,9495775.620000001), (44050,9495515.36), (152213,9494756.96), (121203,9492601.3), (70114,9491012.3), (167588,9484741.11), (136455,9476241.78), (4357,9464355.64), (6786,9463632.57), (61345,9455336.700000001), (160826,9446754.84), (71275,9440138.4), (77746,9439118.35), (91289,9437472.0), (56723,9435102.16), (86647,9434604.18), (131234,9432120.0), (198129,9427651.36), (165530,9426193.68), (69233,9425053.92), (6243,9423304.66), (90110,9420422.7), (191980,9419368.360000001), (38461,9419316.07), (167873,9419024.489999998), (159373,9416950.149999999), (128707,9413428.5), (45267,9410863.78), (48460,9409793.93), (197672,9406887.68), (60884,9403442.4), (15209,9403245.31), (138049,9401262.1), (199286,9391770.7), (19629,9391236.4), (134019,9390615.15), (169475,9387639.58), (165918,9379510.44), (135602,9374251.540000001), (162323,9367566.51), (96277,9360850.68), (98336,9359671.290000001), (119781,9356395.73), (34440,9355365.0), (57362,9355180.1), (167236,9352973.84), (38463,9347530.940000001), (86749,9346826.44), (170007,9345699.9), (193087,9343744.0), (150383,9332576.75), (60932,9329582.02), (128420,9328206.35), (162145,9327722.88), (55686,9320304.4), (163080,9304916.96), (160583,9303515.92), (118153,9298606.56), (152634,9282184.57), (84731,9276586.919999998), (119989,9273814.2), (114584,9269698.65), (131817,9268570.08), (29068,9256583.88), (44116,9255922.0), (115818,9253311.91), (103388,9239218.08), (186118,9236209.12), (155809,9235410.84), (147003,9234847.99), (27769,9232511.64), (112779,9231927.360000001), (124851,9228982.68), (158488,9227216.4), (83328,9224792.2), (136797,9222927.09), (141730,9216370.68), (87304,9215695.5), (156004,9215557.9), (140740,9215329.200000001), (100648,9212185.08), (174774,9211718.0), (37644,9211578.6), (48807,9209496.24), (95940,9207948.4), (141586,9206699.22), (147248,9205654.95), (61372,9205228.76), (52970,9204415.950000001), (26430,9203710.51), (28504,9201669.2), (25810,9198878.5), (125329,9198688.5), (167867,9194022.719999999), (134767,9191444.72), (127745,9191271.559999999), (69208,9187110.0), (155222,9186469.16), (196916,9182995.82), (195590,9176353.12), (169155,9175176.09), (81558,9171946.5), (185136,9171293.04), (114790,9168509.1), (194142,9165836.61), (167639,9161165.0), (11241,9160789.46), (82628,9160155.54), (41399,9148338.0), (30755,9146196.84), (6944,9143574.58), (6326,9138803.16), (101296,9135657.620000001), (181479,9121093.299999999), (76898,9120983.1), (64274,9118745.25), (175826,9117387.99), (142215,9116876.88), (103415,9113128.620000001), (119765,9110768.79), (107624,9108837.45), (84215,9105257.36), (73774,9102651.92), (173972,9102069.0), (69817,9095513.879999999), (86943,9092253.0), (138859,9087719.3), (162273,9085296.48), (175945,9080401.21), (16836,9075715.44), (70224,9075265.950000001), (139765,9074755.89), (30319,9073233.1), (3851,9072657.24), (181271,9070631.52), (162184,9068835.780000001), (81683,9067258.47), (153028,9067010.51), (123324,9061870.95), (186481,9058608.299999999), (167680,9052908.76), (165293,9050545.700000001), (122148,9046298.17), (138604,9045840.799999999), (78851,9044822.600000001), (137280,9042355.34), (8823,9040855.1), (163900,9040848.48), (75600,9035392.45), (81676,9031999.4), (46033,9031460.58), (194917,9028500.0), (133936,9026949.020000001), (33182,9024971.1), (34220,9021485.39), (20118,9019942.6), (178258,9019881.66), (15560,9017687.28), (111425,9016198.56), (95942,9015585.120000001), (132709,9015240.15), (39731,9014746.95), (154307,9012571.2), (23769,9008157.6), (93328,9007211.2), (142826,8998297.440000001), (188792,8996014.0), (68703,8994982.22), (145280,8990941.05), (150725,8985686.16), (172046,8982469.52), (70476,8967629.5), (124988,8966805.22), (17937,8963319.76), (177372,8954873.64), (137994,8950916.79), (84019,8950039.98), (40389,8946158.2), (69187,8941054.14), (4863,8939044.92), (50465,8930503.14), (43686,8915543.84), (131352,8909053.59), (198916,8906940.03), (135932,8905282.95), (104673,8903682.0), (152308,8903244.08), (135298,8900323.2), (156873,8899429.1), (157454,8897339.2), (75415,8897068.09), (46325,8895569.09), (1966,8895117.06), (24576,8895034.75), (19425,8890156.6), (169735,8890085.56), (32225,8889829.280000001), (124537,8889770.71), (146327,8887836.23), (121562,8887740.4), (44731,8882444.95), (93141,8881850.879999999), (187871,8873506.18), (71709,8873057.28), (151913,8869321.17), (33786,8868955.389999999), (35902,8868126.06), (23588,8867769.9), (24508,8867616.0), (161282,8866661.43), (188061,8862304.0), (132847,8862082.0), (166843,8861200.8), (30609,8860214.73), (56191,8856546.959999999), (160740,8852685.43), (71229,8846106.99), (91208,8845541.28), (10995,8845306.56), (78094,8839938.290000001), (36489,8838538.1), (198437,8836494.84), (151693,8833807.64), (185367,8829791.370000001), (65682,8820622.889999999), (65421,8819329.239999998), (122225,8816821.86), (85330,8811013.16), (64555,8810643.120000001), (104188,8808211.02), (54411,8805703.4), (39438,8805282.56), (70795,8800060.92), (20383,8799073.28), (21952,8798624.19), (63584,8796590.0), (158768,8796422.95), (166588,8796214.379999999), (120600,8793558.06), (157202,8788287.879999999), (55358,8786820.75), (168322,8786670.73), (25143,8786324.8), (5368,8786274.14), (114025,8786201.12), (97744,8785315.940000001), (164327,8784503.860000001), (76542,8782613.28), (4731,8772846.7), (157590,8772006.45), (154276,8771733.91), (28705,8771576.64), (100226,8769455.0), (179195,8769185.16), (184355,8768118.05), (120408,8768011.120000001), (63145,8761991.959999999), (53135,8753491.799999999), (173071,8750508.8), (41087,8749436.79), (194830,8747438.4), (43496,8743359.299999999), (30235,8741611.0), (26391,8741399.64), (191816,8740258.719999999), (47616,8737229.68), (152101,8734432.76), (163784,8730514.34), (5134,8728424.639999999), (155241,8725429.86), (188814,8724182.4), (140782,8720378.75), (153141,8719407.51), (169373,8718609.06), (41335,8714773.8), (197450,8714617.32), (87004,8714017.79), (181804,8712257.76), (122814,8711119.14), (109939,8709193.16), (98094,8708780.04), (74630,8708040.75), (197291,8706519.09), (184173,8705467.450000001), (192175,8705411.12), (19471,8702536.12), (18052,8702155.700000001), (135560,8698137.72), (152791,8697325.8), (170953,8696909.19), (116137,8696687.17), (7722,8696589.4), (49788,8694846.71), (13252,8694822.42), (12633,8694559.36), (193438,8690426.72), (17326,8689329.16), (96124,8679794.58), (143802,8676626.48), (30389,8675826.6), (75250,8675257.14), (72613,8673524.94), (123520,8672456.25), (325,8667741.280000001), (167291,8667556.18), (150119,8663403.54), (88420,8663355.4), (179784,8653021.34), (130884,8651970.0), (172611,8648217.0), (85373,8647796.22), (122717,8646758.540000001), (113431,8646348.34), (66015,8643349.4), (33141,8643243.18), (69786,8637396.92), (181857,8637393.28), (122939,8636378.0), (196223,8635391.02), (50532,8632648.24), (58102,8632614.54), (93581,8632372.36), (52804,8632109.25), (755,8627091.68), (16597,8623357.05), (119041,8622397.0), (89050,8621185.98), (98696,8620784.82), (94399,8620524.0), (151295,8616671.02), (56417,8613450.35), (121322,8612948.23), (126883,8611373.42), (29155,8610163.639999999), (114530,8608471.74), (131007,8607394.82), (128715,8606833.620000001), (72522,8601479.98), (144061,8595718.74), (83503,8595034.2), (112199,8590717.44), (9227,8587350.42), (116318,8585910.66), (41248,8585559.639999999), (159398,8584821.0), (105966,8582308.790000001), (137876,8580641.3), (122272,8580400.77), (195717,8577278.1), (165295,8571121.92), (5840,8570728.74), (120860,8570610.440000001), (66692,8567540.52), (135596,8563276.309999999), (150576,8562794.1), (7500,8562393.84), (107716,8561541.56), (100611,8559995.85), (171192,8557390.08), (107660,8556696.6), (13461,8556545.120000001), (90310,8555131.51), (141493,8553782.93), (71286,8552682.0), (136423,8551300.76), (54241,8550785.25), (120325,8549976.6), (424,8547527.1), (196543,8545907.09), (13042,8542717.18), (58332,8536074.69), (9191,8535663.92), (134357,8535429.9), (96207,8534900.6), (92292,8530618.78), (181093,8528303.52), (105064,8527491.6), (59635,8526854.08), (136974,8524351.56), (126694,8522783.37), (6247,8522606.9), (139447,8522521.92), (96313,8520949.92), (108454,8520916.25), (181254,8519496.1), (71117,8519223.0), (131703,8517215.280000001), (59312,8510568.36), (2903,8509960.35), (102838,8509527.69), (162806,8508906.05), (41527,8508222.36), (118416,8505858.36), (180203,8505024.16), (14773,8500598.28), (140446,8499514.24), (199641,8497362.59), (109240,8494617.12), (150268,8494188.379999999), (45310,8492380.65), (36552,8490733.6), (199690,8490145.8), (185353,8488726.68), (163615,8484985.01), (196520,8483545.040000001), (133438,8483482.35), (77285,8481442.32), (55824,8476893.9), (76753,8475522.12), (46129,8472717.959999999), (28358,8472515.5), (9317,8472145.32), (33823,8469721.44), (39055,8469145.07), (91471,8468874.56), (142299,8466039.549999999), (97672,8464119.8), (134712,8461781.790000001), (157988,8460123.200000001), (102284,8458652.44), (73533,8458453.32), (90599,8457874.86), (112160,8457863.360000001), (124792,8457633.7), (66097,8457573.15), (165271,8456969.01), (146925,8454887.91), (164277,8454838.5), (131290,8454811.2), (179386,8450909.899999999), (90486,8447873.86), (175924,8444421.66), (185922,8442394.88), (38492,8436438.32), (172511,8436287.34), (139539,8434180.29), (11926,8433199.52), (55889,8431449.879999999), (163068,8431116.4), (138772,8428406.36), (126821,8425180.68), (22091,8420687.88), (55981,8419434.38), (100960,8419403.46), (172568,8417955.21), (63135,8415945.530000001), (137651,8413170.35), (191353,8413039.84), (62988,8411571.48), (103417,8411541.12), (12052,8411519.28), (104260,8408516.55), (157129,8405730.08), (77254,8405537.22), (112966,8403512.89), (168114,8402764.56), (49940,8402328.2), (52017,8398753.6), (176179,8398087.0), (100215,8395906.61), (61256,8392811.200000001), (15366,8388907.8), (109479,8388027.2), (66202,8386522.83), (81707,8385761.1899999995), (51727,8385426.4), (9980,8382754.62), (174403,8378575.73), (54558,8378041.92), (3141,8377378.22), (134829,8377105.52), (145056,8376920.760000001), (194020,8375157.640000001), (7117,8373982.27), (120146,8373796.2), (126843,8370761.28), (62117,8369493.4399999995), (111221,8367525.81), (159337,8366092.260000001), (173903,8365428.4799999995), (136438,8364065.45), (56684,8363198.0), (137597,8363185.94), (20039,8361138.24), (121326,8359635.52), (48435,8352863.1), (1712,8349107.0), (167190,8347238.699999999), (32113,8346452.04), (40580,8342983.32), (74785,8342519.13), (14799,8342236.75), (177291,8341736.83), (198956,8340370.649999999), (69179,8338465.99), (118764,8337616.56), (128814,8336435.56), (82729,8331766.879999999), (152048,8330638.99), (171085,8326259.499999999), (126730,8325974.399999999), (77525,8323282.5), (170653,8322840.5), (5257,8320350.779999999), (67350,8318987.56), (109008,8317836.54), (199043,8316603.539999999), (139969,8316551.54), (22634,8316531.24), (173309,8315750.25), (10887,8315019.36), (42392,8312895.96), (126040,8312623.2), (101590,8304555.420000001), (46891,8302192.12), (138721,8301745.62), (113715,8301533.199999999), (78778,8299685.64), (142908,8299447.77), (64419,8297631.8), (21396,8296272.27), (4180,8295646.92), (63534,8295383.67), (135957,8294389.859999999), (30126,8291920.32), (158427,8288938.0), (14545,8288395.92), (75548,8288287.199999999), (64473,8286137.4399999995), (149553,8285714.88), (151284,8283526.649999999), (171091,8282934.36), (194256,8278985.34), (952,8276136.0), (121541,8275390.260000001), (177664,8275315.200000001), (51117,8274504.300000001), (66770,8273407.8), (37238,8272728.06), (46679,8270486.55), (165852,8268312.600000001), (99458,8266564.47), (114519,8265493.54), (7231,8264881.5), (19033,8264826.56), (125123,8262732.65), (18642,8261578.99), (50386,8261380.05), (193770,8259578.819999999), (7276,8258101.6), (178045,8253904.149999999), (49033,8253696.2299999995), (187195,8251334.58), (10590,8249227.4), (143779,8247057.7), (35205,8245675.17), (19729,8245081.600000001), (144946,8240479.8), (123786,8239581.239999999), (70843,8237973.2), (112437,8236907.5200000005), (5436,8236039.57), (163754,8235471.16), (115945,8234811.36), (27918,8233957.88), (105712,8233571.859999999), (41007,8229431.79), (40476,8226640.41), (145620,8221371.6), (7771,8220413.33), (86424,8215572.61), (129137,8215478.399999999), (76020,8210495.359999999), (140213,8209831.800000001), (32379,8208338.88), (130616,8207715.75), (195469,8206609.800000001), (191805,8205147.75), (90906,8200951.199999999), (170910,8195558.01), (105399,8193122.63), (123798,8192385.97), (90218,8191689.16), (114766,8189339.54), (11289,8187354.72), (178308,8185750.5), (71271,8185519.239999999), (1115,8184903.380000001), (152636,8184530.720000001), (151619,8182909.05), (116943,8181072.69), (28891,8181051.54), (47049,8180955.0), (158827,8180470.899999999), (92620,8179671.550000001), (20814,8176953.54), (179323,8176795.55), (193453,8174343.94), (56888,8173342.0), (28087,8169876.3), (164254,8169632.35), (57661,8168848.16), (7363,8167538.05), (164499,8167512.08), (197557,8165940.45), (5495,8164805.22), (966,8163824.79), (98435,8161771.45), (127227,8161344.92), (194100,8160978.78), (40134,8160358.08), (107341,8159952.05), (6790,8158792.66), (43851,8157101.4), (51295,8156419.2), (69512,8151537.0), (164274,8149869.93), (130854,8145338.85), (186865,8143586.82), (176629,8141411.2), (193739,8141377.7700000005), (6810,8139822.6), (27732,8136724.96), (50616,8134089.82), (123908,8128920.54), (140994,8128470.819999999), (99039,8128290.78), (62735,8124940.5), (47829,8122796.5), (192635,8122687.569999999), (192429,8119268.0), (145812,8119165.63), (42896,8118529.800000001), (146877,8118266.16), (60882,8116095.04), (18254,8114783.039999999), (165464,8114571.8), (57936,8111927.25), (52226,8110723.32), (128571,8106788.8), (100308,8105837.04), (8872,8102395.619999999), (58867,8102033.19), (145153,8100222.84), (172088,8098138.2), (59398,8095845.45), (89395,8093576.100000001), (171961,8093538.0), (88736,8090762.16), (174053,8090350.109999999), (102237,8089103.22), (43041,8086537.899999999), (110219,8085296.899999999), (126738,8084199.199999999), (44787,8083628.4), (31277,8083580.760000001), (93595,8082188.8), (189040,8080257.210000001), (59851,8079024.239999999), (175100,8077904.01), (43429,8076729.96), (154199,8074940.76), (60963,8073894.4), (8768,8072760.96), (66095,8071421.7), (111552,8068184.48), (24563,8067500.399999999), (16167,8067495.239999999), (12662,8067248.850000001), (94540,8063727.16), (23308,8063463.180000001), (27390,8062823.25), (130660,8062787.48), (8608,8062411.16), (181552,8062008.3), (199319,8060248.56), (55475,8058850.92), (142711,8057926.58), (103499,8056978.0), (105943,8056698.75), (8432,8053052.16), (149392,8049675.6899999995), (101248,8048855.49), (140962,8047260.7), (87101,8046651.83), (133107,8046476.73), (45126,8045924.399999999), (87508,8042966.39), (124711,8042722.72), (173169,8042224.41), (175161,8041331.9799999995), (167787,8040075.779999999), (3242,8038855.53), (114789,8038628.35), (43833,8038545.83), (141198,8035110.72), (137248,8034109.35), (96673,8033491.2), (32180,8032380.720000001), (166493,8031902.399999999), (66959,8031839.4), (85628,8029693.4399999995), (110971,8029469.7), (130395,8027463.920000001), (7757,8026840.37), (178446,8025379.09), (41295,8024785.53), (100956,8024179.300000001), (131917,8021604.78), (24224,8020463.52), (2073,8020009.64), (121622,8018462.17), (14357,8016906.3), (135601,8016209.4399999995), (58458,8016192.52), (73036,8015799.0), (184722,8015680.3100000005), (151664,8014821.96), (195090,8012680.199999999), (162609,8011241.0), (83532,8009753.850000001), (50166,8007137.89), (181562,8006805.960000001), (175165,8005319.76), (62500,8005316.279999999), (36342,8004333.4), (128435,8004242.88), (92516,8003836.800000001), (30802,8003710.88), (107418,8000430.3), (46620,7999778.350000001), (191803,7994734.15), (106343,7993087.76), (59362,7990397.46), (8329,7990052.899999999), (75133,7988244.0), (179023,7986829.62), (135899,7985726.64), (5824,7985340.02), (148579,7984889.56), (95888,7984735.720000001), (9791,7982699.790000001), (170437,7982370.720000001), (39782,7977858.239999999), (20605,7977556.0), (28682,7976959.999999999), (42172,7973399.0), (56137,7971405.4), (64729,7970769.720000001), (98643,7968603.7299999995), (153787,7967535.58), (8932,7967222.1899999995), (20134,7965713.28), (197635,7963507.58), (80408,7963312.17), (37728,7961875.68), (26624,7961772.3100000005), (44736,7961144.1), (29763,7960605.03), (36147,7959463.68), (146040,7957587.66), (115469,7957485.140000001), (142276,7956790.63), (181280,7954037.35), (115096,7953047.55), (109650,7952258.73), (93862,7951992.24), (158325,7950728.3), (55952,7950387.0600000005), (122397,7947106.2700000005), (28114,7946945.720000001), (11966,7945197.48), (47814,7944083.0), (85096,7943691.06), (51657,7943593.7700000005), (196680,7943578.89), (13141,7942730.340000001), (193327,7941036.25), (152612,7940663.71), (139680,7939242.359999999), (31134,7938318.3), (45636,7937240.85), (56694,7936015.949999999), (8114,7933921.88), (71518,7932261.69), (72922,7930400.64), (146699,7929167.4), (92387,7928972.67), (186289,7928786.1899999995), (95952,7927972.78), (196514,7927180.7), (4403,7925729.040000001), (2267,7925649.37), (45924,7925047.68), (11493,7916722.23), (104478,7916253.600000001), (166794,7913842.0), (161995,7910874.27), (23538,7909752.0600000005), (41093,7909579.92), (112073,7908617.57), (92814,7908262.5), (88919,7907992.5), (79753,7907933.88), (108765,7905338.98), (146530,7905336.6), (71475,7903367.58), (36289,7901946.5), (61739,7900794.0), (52338,7898638.08), (194299,7898421.24), (105235,7897829.9399999995), (77207,7897752.72), (96712,7897575.2700000005), (10157,7897046.25), (171154,7896814.5), (79373,7896186.0), (113808,7893353.88), (27901,7892952.0), (128820,7892882.72), (25891,7890511.2), (122819,7888881.02), (154731,7888301.33), (101674,7879324.6), (51968,7879102.21), (72073,7877736.11), (5182,7874521.7299999995))) // 129760 17538456.86
    }
  }
  //This doesn't work.
  "Query 12" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._
    val shipMode1 = "MAIL"
    val shipMode2 = "SHIP"
    val date = "1994-01-01"

    val sql = s"""
      select
        l_shipmode,
        sum(
          case
            when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH'
            then 1
            else 0
          end
        ) as high_line_count,
        sum(
          case
            when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH'
            then 1
            else 0
          end
        ) as low_line_count
      from
        orders,
        lineitem
      where
        o_orderkey = l_orderkey
        and l_shipmode in ('$shipMode1', '$shipMode2')
        and l_commitdate < l_receiptdate
        and l_shipdate < l_commitdate
        and l_receiptdate >= date '$date'
        and l_receiptdate < date '$date' + interval '1' year
      group by l_shipmode
      order by l_shipmode
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(String, BigInt, BigInt)].collect.toList.map{
        case(first, second, third) => ("\""+first+"\"", second, third)
      } == null) // MAIL 6202 9324
    }
  }
  "Query 13" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._

    val word1 = "special"
    val word2 = "requests"

    val sql = s"""
      select
        c_count,
        count(*) as custdist
      from (
        select
          c_custkey,
          count(o_orderkey)
        from
          customer
        left outer join
          orders on c_custkey = o_custkey
          and o_comment not like '%$word1%$word2%'
        group by c_custkey
      ) as c_orders (c_custkey, c_count)
      group by
        c_count
      order by
        custdist desc,
        c_count desc
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[(Long, Long)].collect.toList == null) //  9         6641
    }
  }
  //Fails
  "Query 14" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._
    val date = "1995-09-01"

    val sql = s"""
      select
        100.00 * sum(
          case
            when p_type like 'PROMO%'
            then l_extendedprice * (1 - l_discount)
            else 0
          end
        ) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
      from
        lineitem,
        part
      where
        l_partkey = p_partkey
        and l_shipdate >= date '$date'
        and l_shipdate < date '$date' + interval '1' month
    """

    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.as[Double].collect.toList == null) //  16.38
    }
  }
  "Query 15" in withTpchViews(configuration) { sparkSession =>
    val streamId = "1"
    val date = "1996-01-01"

    val sql1 = s"""
      create temp view revenue$streamId (supplier_no, total_revenue) as
      select
        l_suppkey,
        sum(l_extendedprice * (1 - l_discount))
      from
        lineitem
      where
        l_shipdate >= date '$date'
        and l_shipdate < date '$date' + interval '3' month
      group by
        l_suppkey"""
    val sql2 = s"""
      select
        s_suppkey,
        s_name,
        s_address,
        s_phone,
        total_revenue
      from
        supplier,
        revenue$streamId
      where
        s_suppkey = supplier_no
        and total_revenue = (
          select
            max(total_revenue)
          from
            revenue$streamId
        )
      order by
        s_suppkey"""

    val sql3 = s"""
      drop view revenue$streamId;
    """

    sparkSession.sql(sql1).show()
    sparkSession.sql(sql2).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // 8449 Supplier#000008449 Wp34zim9qYFbVctdW 20-469-856-8873 1772627.21
    }
    sparkSession.sql(sql3).show()
  }

  "Query 16" in withTpchViews(configuration) { sparkSession =>
    import sparkSession.implicits._
    val brand = "Brand#45"
    val pType = "MEDIUM POLISHED"
    val sizes = Seq(49, 14, 23, 45, 19, 3, 36, 9)

    val sql = s"""
      select
        p_brand,
        p_type,
        p_size,
        count(distinct ps_suppkey) as supplier_cnt
      from
        partsupp,
        part
      where
        p_partkey = ps_partkey
        and p_brand <> '$brand'
        and p_type not like '$pType%'
        and p_size in (${sizes.mkString(",")})
        and ps_suppkey not in (
          select
            s_suppkey
          from
            supplier
          where
            s_comment like '%Customer%Complaints%'
          )
      group by
        p_brand,
        p_type,
        p_size
      order by
        supplier_cnt desc,
        p_brand,
        p_type,
        p_size
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      val out = ds.as[(String, String, Long, Long)].collect.toList.map{
        case(first, second, third, fourth) => ("\""+first+"\"","\""+second+"\"",third,fourth)
      }
      assert(out == null) // Brand#41 MEDIUM BRUSHED TIN 3 28
    }
  }
  "Query 17" in withTpchViews(configuration) { sparkSession =>
    val brand = "Brand#23"
    val container = "MED BOX"

    val sql = s"""
      select
        (sum(l_extendedprice) / 7.0) as avg_yearly
      from
        lineitem,
        part
      where
        p_partkey = l_partkey
        and p_brand = '$brand'
        and p_container = '$container'
        and l_quantity < (
          select
            0.2 * avg(l_quantity)
          from
            lineitem
          where
            l_partkey = p_partkey
        )
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) //  348406.05
    }
  }
  "Query 18" in withTpchViews(configuration) { sparkSession =>
    val quantity = 300

    val sql = s"""
      select
        c_name,
        c_custkey,
        o_orderkey,
        o_orderdate,
        o_totalprice,
        sum(l_quantity)
      from
        customer,
        orders,
        lineitem
      where
        o_orderkey in (
          select
            l_orderkey
          from
            lineitem
          group by
            l_orderkey
          having
            sum(l_quantity) > $quantity
        )
        and c_custkey = o_custkey
        and o_orderkey = l_orderkey
      group by
        c_name,
        c_custkey,
        o_orderkey,
        o_orderdate,
        o_totalprice
      order by
        o_totalprice desc,
        o_orderdate
    """

    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // Customer#000128120 128120 4722021 1994-04-07 544089.09 323.00
    }
  }
  "Query 19" in withTpchViews(configuration) { sparkSession =>
    val brand1 = "Brand#12"
    val quantity1 = 1

    val brand2 = "Brand#23"
    val quantity2 = 10

    val brand3 = "Brand#34"
    val quantity3 = 20

    val sql = s"""
      select
        sum(l_extendedprice * (1 - l_discount) ) as revenue
      from
        lineitem,
        part
      where (
        p_partkey = l_partkey
        and p_brand = '$brand1'
        and p_container in ( 'SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
        and l_quantity >= $quantity1
        and l_quantity <= $quantity1 + 10
        and p_size between 1 and 5
        and l_shipmode in ('AIR', 'AIR REG')
        and l_shipinstruct = 'DELIVER IN PERSON'
      )
      or (
        p_partkey = l_partkey
        and p_brand = '$brand2'
        and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
        and l_quantity >= $quantity2
        and l_quantity <= $quantity2 + 10
        and p_size between 1 and 10
        and l_shipmode in ('AIR', 'AIR REG')
        and l_shipinstruct = 'DELIVER IN PERSON'
      )
      or (
        p_partkey = l_partkey
        and p_brand = '$brand3'
        and p_container in ( 'LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
        and l_quantity >= $quantity3
        and l_quantity <= $quantity3 + 10
        and p_size between 1 and 15
        and l_shipmode in ('AIR', 'AIR REG')
        and l_shipinstruct = 'DELIVER IN PERSON'
      )
    """

    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // 3083843.05
    }
  }
  "Query 20" in withTpchViews(configuration) { sparkSession =>
    val color = "forest"
    val date = "1994-01-01"
    val nation = "CANADA"

    val sql = s"""
      select
        s_name,
        s_address
      from
        supplier,
        nation
      where
        s_suppkey in (
          select
            ps_suppkey
          from
            partsupp
          where
            ps_partkey in (
              select
                p_partkey
              from
                part
              where p_name like '$color%'
            )
            and ps_availqty > (
              select
                0.5 * sum(l_quantity)
              from
                lineitem
              where
                l_partkey = ps_partkey
                and l_suppkey = ps_suppkey
                and l_shipdate >= date('$date')
                and l_shipdate < date('$date') + interval '1' year
            )
        )
        and s_nationkey = n_nationkey
        and n_name = '$nation'
      order by
        s_name
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // Supplier#000000020 iybAE,RmTymrZVYaFZva2SH,j
    }
  }
  "Query 21" in withTpchViews(configuration) { sparkSession =>
    val nation = "SAUDI ARABIA"

    val sql = s"""
      select
        s_name,
        count(*) as numwait
      from
        supplier,
        lineitem l1,
        orders,
        nation
      where
        s_suppkey = l1.l_suppkey
        and o_orderkey = l1.l_orderkey
        and o_orderstatus = 'F'
        and l1.l_receiptdate > l1.l_commitdate
        and exists (
          select *
          from
            lineitem l2
          where
            l2.l_orderkey = l1.l_orderkey
            and l2.l_suppkey <> l1.l_suppkey
        )
        and not exists (
          select *
          from
            lineitem l3
          where
            l3.l_orderkey = l1.l_orderkey
            and l3.l_suppkey <> l1.l_suppkey
            and l3.l_receiptdate > l3.l_commitdate
        )
        and s_nationkey = n_nationkey
        and n_name = '$nation'
      group by
        s_name
      order by
        numwait desc,
        s_name
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // Supplier#000002829            20
    }
  }
  "Query 22" in withTpchViews(configuration) { sparkSession =>
    val items = Seq("'13'", "'31'", "'23'", "'29'", "'30'", "'18'", "'17'")

    val sql = s"""
      select
        cntrycode,
        count(*) as numcust,
        sum(c_acctbal) as totacctbal
      from (
        select
          substring(c_phone from 1 for 2) as cntrycode,
          c_acctbal
        from
          customer
        where
          substring(c_phone from 1 for 2) in (${items.mkString(",")})
          and c_acctbal > (
            select
              avg(c_acctbal)
            from
              customer
            where
              c_acctbal > 0.00
              and substring (c_phone from 1 for 2) in (${items.mkString(",")})
          )
          and not exists (
            select *
            from
              orders
            where
              o_custkey = c_custkey
          )
      ) as custsale
      group by
        cntrycode
      order by
        cntrycode
    """
    sparkSession.sql(sql).debugSqlHere { ds =>
      assert(ds.collect.toList == null) // 13 888 6737713.99
    }
  }

}
